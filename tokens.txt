exclude(real clamp_01(real lerp(union Vec2 struct real x y real e static inline Vec2 operator(static inline Vec2 operator(static inline Vec2 operator(static inline Vec2 operator*(static inline Vec2 operator(static inline Vec2 operator(static inline Vec2 operator*(static inline Vec2 operator*(static inline Vec2 operator(static inline Vec2 operator(static inline Vec2 operator*(union Vec2i struct int32 x y int32 e union Vec3 struct real x y z real e static inline Vec3 v3(static inline Vec3 v3(static inline Vec3 v3(static inline Vec3 operator(static inline Vec3 operator(static inline Vec3 operator(static inline Vec3 operator*(static inline Vec3 operator(static inline Vec3 operator(static inline Vec3 operator*(static inline Vec3 operator*(static inline Vec3 operator(static inline Vec3 operator(static inline Vec3 operator*(union Vec4 struct real x y z w real e static inline Vec4 operator*(static inline Vec4 operator*(static inline Vec4 operator*(static inline Vec4 operator(static inline Vec4 operator*(static inline Vec4 operator*(static inline Vec4 v4(Vec4 hex_to_v4(static inline Vec2 v2(static inline Vec2 v2(static inline Vec2 v2(static inline Vec2i v2i(inline Vec2 v2_perpendicular(inline real v2_dot(inline real v2_cross(inline Vec2 v2_from_angle(inline real v2_to_angle(inline Vec2 v2_normalize(union AABB struct Vec2 center union struct real hw hh struct Vec2 hext real e union Rect2 struct real x y w h struct Vec2 position size real e static inline bool operator(Rect2_Clip_Info Vec2 rp1 Vec2 rp2 Vec2 diff1 Vec2 diff2 static inline Rect2_Clip_Info rect2_clip(Rect2i int32 x y w h static inline Rect2i rect2i(static inline bool aabb_intersect(static inline bool aabb_intersect(static inline void aabb_overlap(static inline AABB aabb(static inline AABB aabb(static inline Rect2 rect2(static inline Rect2 intrect_to_rect(static inline Rect2i rect_to_intrect(static inline AABB rect_to_aabb(static inline AABB intrect_to_aabb(static inline Rect2 aabb_to_rect(static inline Rect2i aabb_to_intrect(static inline isize modulus(exclude(static inline isize mem_align_4(void init_memory_arena(uint8* arena_push(void start_temp_arena(void end_temp_arena(void clear_arena(Memory_Arena* new_memory_arena(static inline uint64 _splitmix64(static inline uint64 _rotate_left(Random uint64 x y uint64 next_random_uint64(void init_random(real64 next_random_double(real32 next_random_float(real next_random(real rand_range(int32 rand_range_int(Button_State State_Just_Released State_Released State_Pressed State_Just_Pressed Button_State_Count struct Game_Input isize num_keys_down isize num_mouse_down int8* scancodes int8* keycodes int8* mouse int32 mouse_x int32 mouse_y Vec2i screen_mouse_pos Vec2 mouse_pos bool capture_tabs bool capture_newlines char* text isize text_count enum Game_State Game_State_None Game_State_Menu Game_State_Play typedef struct Spritefont Spritefont typedef struct OpenGL_Renderer OpenGL_Renderer typedef struct Render_Group Renderer_Group typedef struct Game_Registry Game_Registry struct Game_Main SDL_Window* window OpenGL_Renderer* renderer Game_State state real scale Vec2 size Vec2i window_size Memory_Arena* meta_arena Memory_Arena* asset_arena Memory_Arena* game_arena Memory_Arena* temp_arena Memory_Arena* renderer_arena Memory_Arena* registry_arena Memory_Arena* world_arena Memory_Arena* play_arena const char* base_path isize base_path_length Spritefont* body_font Spritefont* title_font Random r Game_Registry* registry Game_Input* input Game_Main* Game OpenGL_Renderer* Renderer Renderer_Group* CurrentGroup Game_Input* Input Spritefont* Body_Font Spritefont* Title_Font real64 next_random_double(real32 next_random_float(real next_random(real rand_range(int32 rand_range_int(void game_set_scale(void game_calc_mouse_pos(void input_text_append_char(bool is_valid_filename_char(char replace_filename_char(isize replace_invalid_filename_chars(isize append_input_text(Direction Direction_North Direction_South Direction_East Direction_West void switch_state(uint32 Sprite_Anchor_Mask xF enum Sprite_Flags SpriteFlag_FlipHoriz Flag(real SpriteAnchorY f f f f f f f f f struct Sprite Vec2 position Vec2 center real angle Vec2 size Rect2 texture Vec4 color uint32 flags real sort_offset struct Sprite4 Sprite e GenerateIntrosortForType(Render_Group GLuint texture Vec2i texture_size Vec2 offset Rect2 clip real32 ortho real night_amount real night_cutoff Sprite* sprites isize sprites_count sprites_capacity struct OpenGL_Renderer GLuint shader_program vbo vao isize u_texturesize u_orthomat u_night_amount u_night_cutoff Render_Group* groups isize groups_count void init_group(void init_renderer(Render_Group* render_group(void render_start(bool render_has_clip_rect(void render_set_clip_rect(void render_sort(void render_add(void render_add_unclipped(void render_add(void render_calculate_ortho_matrix(void render_draw(void render_set_current_group(void render_start(bool render_has_clip_rect(void render_set_clip_rect(void render_sort(void render_add(void render_add_unclipped(void render_add(void render_draw(GLuint ogl_add_texture(GLuint ogl_load_texture(Sprite create_box_primitive(void render_box_primitive(Sprite create_line_primitive(void render_line_primitive(Sprite4 create_box_outline_primitive(void render_box_outline_primitive(Sprite4 create_box_outline_primitive(void render_box_outline_primitive(void render_box_primitive(void render_line_primitive(void render_box_outline_primitive(void render_box_outline_primitive(Animation_Frame Vec3 position real angle Vec4 color Vec2 size Rect2 texture real sort_offset void init_animation_frame(Animation isize id Animation_Frame* frames isize frames_count frames_capacity real fps real inv_fps bool looping void init_animation(Animation* make_animaiton_from_strip(Animated_Sprite Animation** animations isize animations_count animations_capacity isize current_animation current_frame bool running real timer void init_animated_sprite(void animated_sprite_update(isize add_animation(isize play_animation(Spritefont int32 line_padding int32 character_padding int32 tab_size int32 glyph_width glyph_height Rect2* glyphs Vec4 color void init_spritefont(static inline int32 dec_str_to_int(static inline bool _isnt_spritefont_separator(Rect2* parse_spritefont_rectangles(void load_spritefont(Spritefont* load_spritefont(Vec2 spritefont_size_text(Vec2 spritefont_size_text(void spritefont_render_text(void spritefont_render_text_ex(void spritefont_render_text(void spritefont_render_text_background(Vec4 Gui_TextBackgroundColor Vec4 f void render_body_text(void render_title_text(bool gui_query_mouse(Vec4 Color_White _color(bool gui_add_button(bool gui_add_checkbox(void gui_add_slider(Gui_Window_Handle Vec2 position char* title int32 z struct Gui_Text_Input_Handle char* buffer isize buffer_length buffer_capacity isize max_chars_by_width isize cursor selection_start bool active bool accept_newlines bool accept_tabs void init_text_input_handle(void init_text_input_handle(void gui_add_text_input(Gui_Context Vec2 last_pos Vec2 next_pos isize axis typedef struct World World struct Play_State usize current_time prev_time real accumulator World* world bool running Vec2i world_xy bool delete_world_on_stop bool save_world_on_stop Play_State* play_state struct Menu_State char save_dir FilePathMaxLength isize save_dir_len tinydir_dir saves bool saves_dirty Gui_Text_Input_Handle handle isize delete_index Menu_State* menu_state typedef struct Entity Entity typedef struct World_Area World_Area typedef struct World World typedef EntityOnActivateDecl(Tile_State isize id int32 damage void init_tile_state(Item_Info_Types Item_None Item_Hooknife Item_Rope Item_Book Item_Rock Item_Info_Types_Count struct Item_Info isize id usize hash const char* name int32 max_stack Rect2 texture enum Entity_Event_Type EntityEvent_None Flag(Rituals_Enemy_Kind EnemyKind_Slime EnemyKind_Bat EnemyKind_Snake EnemyKind_Goblin_Knight enum Rituals_Pickup_Kind PickupKind_Item PickupKind_Health union Rituals_Entity_Userdata struct Rituals_Entity_Kinds contains isize subtype isize amount isize quality prop struct isize held_entity_id real heal_cooldown real heal_timer int32 heal_rate int32 heal_to_interval player struct isize kind isize mode real speed real alert_dist real follow_dist union struct Vec2 perch bat struct real chase_speed_modifier snake struct Vec2 patrol_start Vec2 patrol_end goblin_knight enemy struct isize kind union struct isize id count item struct isize amount health pickup struct void* ptr isize size unknown usize hash_str(Game_Registry Tile_Info* tiles usize* tiles_hash isize tiles_count Item_Info* items usize* items_hash isize items_count Game_Registry* Registry void init_game_registry(while(_game_registry__ void sort_func_name(isize i i Registry array_base_name auto pair pairs i Registry array_base_name i pair v Registry array_base_name Registry array_base_name i id i _generate_registry_lookup(Tile_Info* add_tile_info(void register_all_rituals_tile_info(Item_Info* add_item_type(void register_all_rituals_item_info(void register_everything_in_rituals(Item_Stack isize id Item_Info* info int32 number void init_item_stack(Item_Stack* new_item_stack(Inventory Item_Stack** contents isize w h size void init_inventory(bool inventory_add_item(void render_inventory(Tilemap isize w h Tile* tiles Tile_State* states void init_tilemap(void generate_tilemap(Tile tilemap_get_at(Tile tilemap_get_at(Tile_State* tilemap_get_state_at(Tile_State* tilemap_get_state_at(bool tilemap_set_at(bool tilemap_set_at(void update_tile_state_at(void update_tile_state_at(void render_tilemap(isize render_tilemap(Sim_Body_Flags Body_Flag_None Body_Flag_Static Flag(Sim_Contact isize a_id isize b_id Sim_Body* static_b Vec2 overlap real mag Vec2 normal GenerateIntrosortForType(Sim_Grid_Cell Sim_Body* body Sim_Grid_Cell* next struct Sim_Static_Grid Sim_Grid_Cell* cell_storage isize cell_storage_count cell_storage_capacity Sim_Grid_Cell** cells isize cells_length Vec2i size void init_static_grid(Sim_Grid_Cell* get_next_grid_cell(void build_static_grid(Simulator Sim_Body* static_bodies isize static_bodies_count static_bodies_capacity Sim_Static_Grid* grid Sim_Body* bodies isize bodies_count bodies_capacity next_body_id Sim_Contact* contacts isize contacts_count contacts_capacity isize sort_axis Sim_Body* sim_get_next_static_body(Sim_Body* sim_get_next_body(void init_simulator(Sim_Body* sim_find_body(void sim_sort_bodies_on_id(void sim_remove_body(void sim_remove_body(Sim_Body* sim_query_aabb(int32 _do_collide_bodies(void _separate_bodies(void sim_update(isize _tw _th Tile* _tiles Tile_Info* _get_at(void generate_statics_for_tilemap(Particle Vec3 position Vec3 velocity real scale real angle real angular_vel int32 frame int32 time int32 total_time int32 style_index struct Particle_Style int32 id Rect2 texture Vec2 size Vec4 color Vec4 shadow_color Vec3 acceleration real impulse_min real impulse_max real angle_min real angle_max real angle_vel_min real angle_vel_max real scale_min real scale_max int32 frame_min int32 frame_max int32 max_frames int32 framerate int32 time_min int32 time_max bool time_scaling bool time_alpha real ground_restitution real skid_on_bounce_min real skid_on_bounce_max real jitter_on_bounce_mag Particle_Style copy_particle_style(Particle_Style make_particle_style(void init_particle(Emitter Particle* particles isize particles_count particles_capacity Particle_Style* styles isize styles_count styles_capacity void init_emitter(void emitter_spawn(void emitter_render(typedef struct Entity Entity struct Hitbox_Contact isize a_id isize b_id Entity* a Entity* b struct Hitbox isize id Entity* ref uint64 mask uint64 group AABB box GenerateIntrosortForType(Entity isize id isize body_id Sim_Body* body Vec2 walk_impulse Hitbox hitbox int32 health int32 attack real attack_interval real attack_timer real knockback Animated_Sprite* anim Sprite sprite real z real shadow_scale isize kind int32 counter int32 facing Direction direction uint64 events uint64 flags Rituals_Entity_Userdata userdata GenerateIntrosortForType(World_Area_Biome AreaBiome_Grassland AreaBiome_Desert struct World_Area_Stub isize id usize seed Area_Link north Area_Link south Area_Link west Area_Link east World_Area_Biome biome struct World_Area isize id World_Area_Stub* stub World* world Simulator sim Tilemap map Vec2 offset Vec2 target Entity* entities bool entities_dirty isize entities_count entities_capacity next_entity_id isize* removed_entities isize removed_entities_count removed_entities_capacity Hitbox* hitboxes isize hitboxes_count hitboxes_capacity int32 hitbox_sort_axis Hitbox_Contact* hitbox_contacts isize hitbox_contacts_count hitbox_contacts_capacity Entity* player void init_world_area(void init_entity(Entity* world_area_get_next_entity(Entity* world_area_find_entity(void world_area_sort_entities_on_id(void world_area_synchronize_entities_and_bodies(bool world_area_remove_entity(void world_area_on_destroy_entity(void world_area_process_removed_entities(void world_area_build_hitboxes(void world_area_process_hitboxes(World char* name World_Area_Stub* area_stubs isize next_area_id isize areas_count areas_capacity isize areas_width areas_height World_Area* current_area usize seed Entity global_player_entity Sim_Body global_player_body usize slowtick_timer usize slowtick_timer_interval Particle_Style base_style Emitter emitter isize Anim_Standing isize Anim_Walking void init_world(void world_area_init_player(void world_area_deinit_player(void deserialize_area(Entity* rituals_spawn_enemy(void serialize_world(void world_start_in_area(int recursively_delete_folder(void generate_world(void rituals_walk_entities(void world_area_animate_entities(bool world_area_frametick_entities(void world_area_slowtick_entities(void world_area_on_destroy_entity(void world_area_on_activate_entity(void world_area_hit_entities(void world_area_contact_entities(void world_area_interact(void world_area_render(void init_play_state(void rituals_prop_drop_on_break(Entity* rituals_spawn_enemy(void rituals_on_activate_entity(void rituals_on_destroy_entity(bool rituals_frametick_entities(void rituals_slowtick_entities(void rituals_walk_entities(void rituals_animate_entities(void rituals_interact_entities(void rituals_hit_entities(void rituals_entity_on_contact_terrain(void rituals_contact_entities(void init_play_state(void deserialize_world(void play_state_update(void play_state_stop(int delete_file(int delete_folder(int _recursive_delete(int recursively_delete_folder(int check_path(void check_dir(void serialize_tile_state(void deserialize_tile_state(void deserialize_tilemap(void serialize_tilemap(void serialize_sim_body(void deserialize_sim_body(void serialize_simulator(void deserialize_simulator(void serialize_sprite(void deserialize_sprite(void deserialize_rituals_entity_userdata(void deserialize_hitbox(void deserialize_entity(void deserialize_area(void serialize_rituals_entity_userdata(void serialize_hitbox(void serialize_entity(void serialize_area(void serialize_area_link(void deserialize_area_link(void serialize_world_area_stub(void deserialize_world_area_stub(FILE* get_world_file(FILE* get_area_file(void serialize_world(void deserialize_world(void init_menu_state(void stop_state(void start_state(void switch_state(bool b false real r void main_menu_update(Sprite* boxes void test_init(void test_update(void update(void load_assets(void update_screen(float tt int main((null)(