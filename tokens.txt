inline real clamp(real min,real max,
real clamp_01(
real lerp(real b,real t,
static inline Vec2 operator(
static inline Vec2 operator(Vec2 b,
static inline Vec2 operator(Vec2 b,
static inline Vec2 operator*(real s,
static inline Vec2 operator(Vec2 a,
static inline Vec2 operator(real s,
static inline Vec2 operator*(Vec2 a,
static inline Vec2 operator*(Vec2 b,
static inline Vec2 operator(Vec2 b,
static inline Vec2 operator(Vec2 b,
static inline Vec2 operator*(real b,
static inline Vec3 v3(real y,real z,
static inline Vec3 v3(real z,
static inline Vec3 v3(
static inline Vec3 operator(
static inline Vec3 operator(Vec3 b,
static inline Vec3 operator(Vec3 b,
static inline Vec3 operator*(real s,
static inline Vec3 operator(Vec3 a,
static inline Vec3 operator(real s,
static inline Vec3 operator*(Vec3 a,
static inline Vec3 operator*(Vec3 b,
static inline Vec3 operator(Vec3 b,
static inline Vec3 operator(Vec3 b,
static inline Vec3 operator*(real b,
static inline Vec4 operator*(Vec4 b,
static inline Vec4 operator*(real b,
static inline Vec4 operator*(Vec4 a,
static inline Vec4 operator(real b,
static inline Vec4 operator*(real b,
static inline Vec4 operator*(Vec4 b,
static inline Vec4 v4(real y,real z,real w,
Vec4 hex_to_v4(
static inline Vec2 v2(real y,
static inline Vec2 v2(
static inline Vec2 v2(
static inline Vec2i v2i(int32 y,
inline Vec2 v2_perpendicular(
inline real v2_dot(Vec2 b,
inline real v2_cross(Vec2 b,
inline Vec2 v2_from_angle(
inline real v2_to_angle(
inline Vec2 v2_normalize(
static inline bool operator(Rect2 b,
static inline Rect2_Clip_Info rect2_clip(Rect2 clip,
static inline Rect2i rect2i(int32 y,int32 w,int32 h,
static inline bool aabb_intersect(AABB* b,
static inline bool aabb_intersect(AABB b,
static inline void aabb_overlap(AABB* b,Vec2* s,
static inline AABB aabb(real hw,real hh,
static inline AABB aabb(real y,real hw,real hh,
static inline Rect2 rect2(real y,real w,real h,
static inline Rect2 intrect_to_rect(
static inline Rect2i rect_to_intrect(
static inline AABB rect_to_aabb(
static inline AABB intrect_to_aabb(
static inline Rect2 aabb_to_rect(
static inline Rect2i aabb_to_intrect(
static inline isize modulus(isize b,
exclude(
static inline isize mem_align_4(
void init_memory_arena(usize size,
uint8* arena_push(isize size,
void start_temp_arena(
void end_temp_arena(
void clear_arena(
Memory_Arena* new_memory_arena(Memory_Arena* src,
static inline uint64 _splitmix64(
static inline uint64 _rotate_left(int64 k,
uint64 next_random_uint64(
void init_random(uint64 seed,
real64 next_random_double(
real32 next_random_float(
real next_random(
real rand_range(real min,real max,
int32 rand_range_int(real min,real max,
real64 next_random_double(
real32 next_random_float(
real next_random(
real rand_range(real max,
int32 rand_range_int(real max,
void game_set_scale(
void game_calc_mouse_pos(
void input_text_append_char(
bool is_valid_filename_char(
char replace_filename_char(char replace,
isize replace_invalid_filename_chars(isize len,char replace,
isize append_input_text(isize str_cap,isize str_len,isize insert_from_end =0),
GenerateIntrosortForType(Sprite,_get_sprite_y_base,
void init_group(isize sprites_capacity,Memory_Arena* arena,
void init_renderer(isize group_count,isize group_size,char* vertex_source,char* frag_source,Memory_Arena* arena,
Render_Group* render_group(isize index,
void render_start(
bool render_has_clip_rect(
void render_set_clip_rect(real x,real y,real w,real h,
void render_sort(isize offset,
void render_add(Sprite* sprite,
void render_add_unclipped(Sprite* sprite,
void render_add(Sprite4* s4,
void render_calculate_ortho_matrix(Vec4 screen,real nearplane,real farplane,
void render_draw(Render_Group* group,Vec2 size,real scale,
void render_set_current_group(
void render_start(
bool render_has_clip_rect(
void render_set_clip_rect(real y,real w,real h,
void render_sort(
void render_add(
void render_add_unclipped(
void render_add(
void render_draw(real scale,
GLuint ogl_add_texture(isize w,isize h,
GLuint ogl_load_texture(isize* w_o,isize* h_o,
Sprite create_box_primitive(Vec2 size,Vec4 color,
void render_box_primitive(Vec2 pos,Vec2 size,Vec4 color,
Sprite create_line_primitive(Vec2 end,Vec4 color,int32 thickness,
void render_line_primitive(Vec2 start,Vec2 end,Vec4 color,int32 thickness,
Sprite4 create_box_outline_primitive(Vec2 size,Vec4 color,int32 thickness,
void render_box_outline_primitive(Vec2 center,Vec2 size,Vec4 color,int32 thickness,
Sprite4 create_box_outline_primitive(Vec2 size,Vec4 color,int32 thickness,
void render_box_outline_primitive(Vec2 center,Vec2 size,Vec4 color,int32 thickness,
void render_box_primitive(Vec2 size,Vec4 color,
void render_line_primitive(Vec2 end,Vec4 color,int32 thickness,
void render_box_outline_primitive(Vec2 size,Vec4 color,int32 thickness,
void render_box_outline_primitive(Vec2 size,Vec4 color,int32 thickness,
void init_animation_frame(
void init_animation(real fps,isize capacity,Memory_Arena* arena,
Animation* make_animaiton_from_strip(real fps,Rect2 frame,isize count,
void init_animated_sprite(isize capacity,Memory_Arena* arena,
void animated_sprite_update(real timestep,
isize add_animation(Animation* a,
isize play_animation(isize anim_index,
void init_spritefont(
static inline int32 dec_str_to_int(isize len,
static inline bool _isnt_spritefont_separator(
Rect2* parse_spritefont_rectangles(Memory_Arena* arena,int32 offsetx,int32 offsety,int32* w,int32* h,
void load_spritefont(char* file_path_in,Vec2i offset,
Spritefont* load_spritefont(Vec2i offset,
Vec2 spritefont_size_text(char* text,isize len,
Vec2 spritefont_size_text(char* text,
void spritefont_render_text(char* text,isize len,Vec2 position,int32 max_width = -1,,Sprite_Anchor anchor Anchor_Top_Left = Anchor_Top_Left,,real scale f = 1.0f,,Vec2* region NULL = NULL),
void spritefont_render_text_ex(char* text,isize len,Vec2 position,int32 max_width = -1,,Sprite_Anchor anchor Anchor_Top_Left = Anchor_Top_Left,,real scale f = 1.0f,,Vec2* region NULL = NULL),
void spritefont_render_text(char* text,Vec2 position,Sprite_Anchor anchor Anchor_Top_Left = Anchor_Top_Left,,real scale f = 1.0f),
void spritefont_render_text_background(char* text,Vec2 position,real scale,Vec4 background,
void render_body_text(Vec2 position,bool background false =false,,real scale f = 1.0f),
void render_title_text(Vec2 position,
bool gui_query_mouse(Vec2 parent,
bool gui_add_button(char* text,Vec2 minimum_size,
bool gui_add_button(char* text,
bool gui_add_checkbox(char* text,bool* value,
void gui_add_slider(Vec2 size,char* label,real min,real max,int precision,real* in_value,bool* active,bool show_bounds false = false),
void init_text_input_handle(char* buf,isize capacity,isize length,
void init_text_input_handle(real width,Memory_Arena* arena,
void gui_add_text_input(Vec2 position,Vec2 size,char* default_text NULL =NULL),
void init_tile_state(isize id,
usize hash_str(
void init_game_registry(Memory_Arena* arena,
return_type* lookup_func_name(
_game_registry__ void sort_func_name(
void finalize_game_registry(
Tile_Info* add_tile_info(real movement_modifier,real friction,Rect2 texture,bool solid,char* break_to_name,
void register_all_rituals_tile_info(
Item_Info* add_item_type(int32 max_stack,Rect2 texture,
void register_all_rituals_item_info(
void register_everything_in_rituals(
void init_item_stack(Item_Info* info,
Item_Stack* new_item_stack(Memory_Arena* arena,
void init_inventory(isize w,isize h,Memory_Arena* arena,
bool inventory_add_item(Item_Stack** origin_slot,
void render_inventory(Vec2 position,
void init_tilemap(isize w,isize h,Memory_Arena* arena,
void generate_tilemap(uint64 seed,
Tile tilemap_get_at(isize x,isize y,
Tile tilemap_get_at(Vec2 pos,
Tile_State* tilemap_get_state_at(isize x,isize y,
Tile_State* tilemap_get_state_at(Vec2 pos,
bool tilemap_set_at(isize x,isize y,Tile value,
bool tilemap_set_at(Vec2 pos,Tile value,
void update_tile_state_at(isize x,isize y,
void update_tile_state_at(Vec2 pos,
void render_tilemap(Vec2 pos,
isize render_tilemap(Vec2 pos,Rect2 area,
GenerateIntrosortForType(Sim_Body,_body_get_min_x,
void init_static_grid(Vec2i size,isize capacity,Memory_Arena* arena,
Sim_Grid_Cell* get_next_grid_cell(
void build_static_grid(Sim_Body* bodies,isize count,
Sim_Body* sim_get_next_static_body(
Sim_Body* sim_get_next_body(
void init_simulator(isize cap,Memory_Arena* arena,
Sim_Body* sim_find_body(isize id,
void sim_sort_bodies_on_id(
void sim_remove_body(isize body,
void sim_remove_body(Sim_Body* body,
Sim_Body* sim_query_aabb(AABB query,
int32 _do_collide_bodies(Sim_Body* b,Simulator* sim,bool do_sweep,
void _separate_bodies(Sim_Body* b,bool capture_contacts,int32 times,Simulator* sim,
void sim_update(Tilemap* map,real dt,bool capture_contacts true = true),
Tile_Info* _get_at(isize y,
void generate_statics_for_tilemap(Tilemap* tilemap,
Particle_Style copy_particle_style(Vec2 impulse_range,Vec2i time_range,
Particle_Style make_particle_style(Vec2 size,Vec4 color,Vec4 shadow_color,Vec3 acl,Vec2 impulse_range,Vec2 angle_range,Vec2 angle_vel_range,Vec2 scale_range,Vec2i frame_range,int32 max_frames,int32 framerate,Vec2i time_range,bool time_scaling,real ground_restitution,Vec2 skid_on_bounce_range,real jitter_on_bounce_mag,
void init_particle(Vec3 pos,Vec3 vel,real scale,real angle,real anglev,int32 frame,int32 time,int32 style_index,
void init_emitter(isize max_particles,Memory_Arena* arena,
void emitter_spawn(Vec3 pos,Vec2 angle_range,isize count,Particle_Style style,
void emitter_render(Simulator* sim,real dt,
GenerateIntrosortForType(Hitbox,_hitbox_get_x1,
void init_world_area(Memory_Arena* arena,
void init_entity(
Entity* world_area_get_next_entity(
Entity* world_area_find_entity(isize id,
void world_area_sort_entities_on_id(
void world_area_synchronize_entities_and_bodies(
bool world_area_remove_entity(Entity* entity,
void world_area_remove_entity_internal(isize id,
void world_area_process_removed_entities(
void world_area_build_hitboxes(
void world_area_process_hitboxes(
void init_world(isize width,isize height,usize seed,Memory_Arena* arena,
void world_area_init_player(Vec2i tile_pos,bool move_player true =true),
void world_area_deinit_player(bool move_player true =true),
World_Area* world_load_area(isize id,Memory_Arena* arena,
void generate_world_area(World_Area* area,World_Area_Stub* stub,
void world_switch_current_area(Area_Link link,Memory_Arena* arena,
void world_start_in_area(World_Area_Stub* area,Memory_Arena* arena,
void world_delete_self(
void generate_world(World* world,
void world_area_walk_entities(World* world,
void world_area_animate_entities(World* world,
bool world_area_frametick_entities(World* world,
void world_area_slowtick_entities(World* world,
void world_area_on_destroy_entity(World_Area* area,World* world,
void world_area_on_activate_entity(World_Area* area,World* world,
void world_area_hit_entities(World* world,
void world_area_contact_entities(World* world,
void world_area_interact(World* world,
void world_area_render(World* world,
void world_area_update(World* world,
void rituals_prop_drop_on_break(Entity* a,
Entity* rituals_spawn_enemy(isize enemykind,Vec2 position,
void rituals_on_activate_entity(World_Area* area,World* world,
void rituals_on_destroy_entity(World_Area* area,World* world,
bool rituals_frametick_entities(isize count,World_Area* area,World* world,
void rituals_slowtick_entities(isize count,World_Area* area,World* world,
void rituals_walk_entities(isize count,World_Area* area,World* world,
void rituals_animate_entities(isize count,World_Area* area,World* world,
void rituals_interact_entities(isize count,World_Area* area,World* world,
void rituals_hit_entities(isize count,World_Area* area,World* world,
void rituals_entity_on_contact_terrain(World_Area* area,World* world,
void rituals_contact_entities(isize count,World_Area* area,World* world,
void init_play_state(
void start_play_state(
void play_state_update(
void play_state_stop(
int delete_file(isize path_length,char* file,
int delete_folder(isize path_length,
int _recursive_delete(isize last_path_len,char* path,
int recursively_delete_folder(bool append_base_path false = false),
int check_path(
void check_dir(
void serialize_tile_state(FILE* file,
void deserialize_tile_state(FILE* file,
void deserialize_tilemap(FILE* file,Memory_Arena* arena,
void serialize_tilemap(FILE* file,
void serialize_sim_body(FILE* file,
void deserialize_sim_body(FILE* file,
void serialize_simulator(FILE* file,
void deserialize_simulator(FILE* file,Memory_Arena* arena,
void serialize_sprite(FILE* file,
void deserialize_sprite(FILE* file,
void deserialize_rituals_entity_userdata(FILE* file,
void deserialize_hitbox(FILE* file,
void deserialize_entity(FILE* file,
void deserialize_area(FILE* area_file,Memory_Arena* arena,
void serialize_rituals_entity_userdata(FILE* file,
void serialize_hitbox(FILE* file,
void serialize_entity(FILE* file,
void serialize_area(FILE* area_file,
void serialize_area_link(FILE* fp,
void deserialize_area_link(World* world,FILE* fp,
void serialize_world_area_stub(FILE* fp,
void deserialize_world_area_stub(World* world,FILE* fp,
FILE* get_world_file(const char* mode,
FILE* get_area_file(isize id,const char* mode,
void serialize_world(
void deserialize_world(FILE* world_file,
void init_menu_state(
void stop_state(
void start_state(
void switch_state(
void main_menu_update(
void test_init(
void test_update(
void update(
void load_assets(
void update_screen(
int main(char** argv,
(null)(
