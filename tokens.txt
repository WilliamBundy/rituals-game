inline real clamp(
real clamp_01(
real lerp(
static inline Vec2 operator(
static inline Vec2 operator(
static inline Vec2 operator(
static inline Vec2 operator*(
static inline Vec2 operator(
static inline Vec2 operator(
static inline Vec2 operator*(
static inline Vec2 operator*(
static inline Vec2 operator(
static inline Vec2 operator(
static inline Vec2 operator*(
static inline Vec3 v3(
static inline Vec3 v3(
static inline Vec3 v3(
static inline Vec3 operator(
static inline Vec3 operator(
static inline Vec3 operator(
static inline Vec3 operator*(
static inline Vec3 operator(
static inline Vec3 operator(
static inline Vec3 operator*(
static inline Vec3 operator*(
static inline Vec3 operator(
static inline Vec3 operator(
static inline Vec3 operator*(
static inline Vec4 operator*(
static inline Vec4 operator*(
static inline Vec4 operator*(
static inline Vec4 operator(
static inline Vec4 operator*(
static inline Vec4 operator*(
static inline Vec4 v4(
Vec4 hex_to_v4(
static inline Vec2 v2(
static inline Vec2 v2(
static inline Vec2 v2(
static inline Vec2i v2i(
inline Vec2 v2_perpendicular(
inline real v2_dot(
inline real v2_cross(
inline Vec2 v2_from_angle(
inline real v2_to_angle(
inline Vec2 v2_normalize(
static inline bool operator(
static inline Rect2_Clip_Info rect2_clip(
static inline Rect2i rect2i(
static inline bool aabb_intersect(
static inline bool aabb_intersect(
static inline void aabb_overlap(
static inline AABB aabb(
static inline AABB aabb(
static inline Rect2 rect2(
static inline Rect2 intrect_to_rect(
static inline Rect2i rect_to_intrect(
static inline AABB rect_to_aabb(
static inline AABB intrect_to_aabb(
static inline Rect2 aabb_to_rect(
static inline Rect2i aabb_to_intrect(
static inline isize modulus(
exclude(
static inline isize mem_align_4(
void init_memory_arena(
uint8* arena_push(
void start_temp_arena(
void end_temp_arena(
void clear_arena(
Memory_Arena* new_memory_arena(
static inline uint64 _splitmix64(
static inline uint64 _rotate_left(
uint64 next_random_uint64(
void init_random(
real64 next_random_double(
real32 next_random_float(
real next_random(
real rand_range(
int32 rand_range_int(
real64 next_random_double(
real32 next_random_float(
real next_random(
real rand_range(
int32 rand_range_int(
void game_set_scale(
void game_calc_mouse_pos(
void input_text_append_char(
bool is_valid_filename_char(
char replace_filename_char(
isize replace_invalid_filename_chars(
isize append_input_text(
GenerateIntrosortForType(
void init_group(
void init_renderer(
Render_Group* render_group(
void render_start(
bool render_has_clip_rect(
void render_set_clip_rect(
void render_sort(
void render_add(
void render_add_unclipped(
void render_add(
void render_calculate_ortho_matrix(
void render_draw(
void render_set_current_group(
void render_start(
bool render_has_clip_rect(
void render_set_clip_rect(
void render_sort(
void render_add(
void render_add_unclipped(
void render_add(
void render_draw(
GLuint ogl_add_texture(
GLuint ogl_load_texture(
Sprite create_box_primitive(
void render_box_primitive(
Sprite create_line_primitive(
void render_line_primitive(
Sprite4 create_box_outline_primitive(
void render_box_outline_primitive(
Sprite4 create_box_outline_primitive(
void render_box_outline_primitive(
void render_box_primitive(
void render_line_primitive(
void render_box_outline_primitive(
void render_box_outline_primitive(
void init_animation_frame(
void init_animation(
Animation* make_animaiton_from_strip(
void init_animated_sprite(
void animated_sprite_update(
isize add_animation(
isize play_animation(
void init_spritefont(
static inline int32 dec_str_to_int(
static inline bool _isnt_spritefont_separator(
Rect2* parse_spritefont_rectangles(
void load_spritefont(
Spritefont* load_spritefont(
Vec2 spritefont_size_text(
Vec2 spritefont_size_text(
void spritefont_render_text(
void spritefont_render_text_ex(
void spritefont_render_text(
void spritefont_render_text_background(
void render_body_text(
void render_title_text(
bool gui_query_mouse(
bool gui_add_button(
bool gui_add_button(
bool gui_add_checkbox(
void gui_add_slider(
void init_text_input_handle(
void init_text_input_handle(
void gui_add_text_input(
void init_tile_state(
usize hash_str(
void init_game_registry(
return_type* lookup_func_name(
_game_registry__ void sort_func_name(
void finalize_game_registry(
Tile_Info* add_tile_info(
void register_all_rituals_tile_info(
Item_Info* add_item_type(
void register_all_rituals_item_info(
void register_everything_in_rituals(
void init_item_stack(
Item_Stack* new_item_stack(
void init_inventory(
bool inventory_add_item(
void render_inventory(
void init_tilemap(
void generate_tilemap(
Tile tilemap_get_at(
Tile tilemap_get_at(
Tile_State* tilemap_get_state_at(
Tile_State* tilemap_get_state_at(
bool tilemap_set_at(
bool tilemap_set_at(
void update_tile_state_at(
void update_tile_state_at(
void render_tilemap(
isize render_tilemap(
GenerateIntrosortForType(
void init_static_grid(
Sim_Grid_Cell* get_next_grid_cell(
void build_static_grid(
Sim_Body* sim_get_next_static_body(
Sim_Body* sim_get_next_body(
void init_simulator(
Sim_Body* sim_find_body(
void sim_sort_bodies_on_id(
void sim_remove_body(
void sim_remove_body(
Sim_Body* sim_query_aabb(
int32 _do_collide_bodies(
void _separate_bodies(
void sim_update(
Tile_Info* _get_at(
void generate_statics_for_tilemap(
Particle_Style copy_particle_style(
Particle_Style make_particle_style(
void init_particle(
void init_emitter(
void emitter_spawn(
void emitter_render(
GenerateIntrosortForType(
void init_world_area(
void init_entity(
Entity* world_area_get_next_entity(
Entity* world_area_find_entity(
void world_area_sort_entities_on_id(
void world_area_synchronize_entities_and_bodies(
bool world_area_remove_entity(
void world_area_remove_entity_internal(
void world_area_process_removed_entities(
void world_area_build_hitboxes(
void world_area_process_hitboxes(
void init_world(
void world_area_init_player(
void world_area_deinit_player(
World_Area* world_load_area(
void generate_world_area(
void world_switch_current_area(
void world_start_in_area(
void world_delete_self(
void generate_world(
void world_area_walk_entities(
void world_area_animate_entities(
bool world_area_frametick_entities(
void world_area_slowtick_entities(
void world_area_on_destroy_entity(
void world_area_on_activate_entity(
void world_area_hit_entities(
void world_area_contact_entities(
void world_area_interact(
void world_area_render(
void world_area_update(
void rituals_prop_drop_on_break(
Entity* rituals_spawn_enemy(
void rituals_on_activate_entity(
void rituals_on_destroy_entity(
bool rituals_frametick_entities(
void rituals_slowtick_entities(
void rituals_walk_entities(
void rituals_animate_entities(
void rituals_interact_entities(
void rituals_hit_entities(
void rituals_entity_on_contact_terrain(
void rituals_contact_entities(
void init_play_state(
void start_play_state(
void play_state_update(
void play_state_stop(
int delete_file(
int delete_folder(
int _recursive_delete(
int recursively_delete_folder(
int check_path(
void check_dir(
void serialize_tile_state(
void deserialize_tile_state(
void deserialize_tilemap(
void serialize_tilemap(
void serialize_sim_body(
void deserialize_sim_body(
void serialize_simulator(
void deserialize_simulator(
void serialize_sprite(
void deserialize_sprite(
void deserialize_rituals_entity_userdata(
void deserialize_hitbox(
void deserialize_entity(
void deserialize_area(
void serialize_rituals_entity_userdata(
void serialize_hitbox(
void serialize_entity(
void serialize_area(
void serialize_area_link(
void deserialize_area_link(
void serialize_world_area_stub(
void deserialize_world_area_stub(
FILE* get_world_file(
FILE* get_area_file(
void serialize_world(
void deserialize_world(
void init_menu_state(
void stop_state(
void start_state(
void switch_state(
void main_menu_update(
void test_init(
void test_update(
void update(
void load_assets(
void update_screen(
int main(
(null)(
